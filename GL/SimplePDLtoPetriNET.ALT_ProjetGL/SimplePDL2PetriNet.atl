--@nsURI SimplePDL=http://simplepdl
--@nsURI PetriNet=http://petrinet

module SimplePDL2PetriNet;
create OUT: petriNet from  IN: simplepdl;

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petriNet!PetriNet (name <- p.name)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_notStarted: petriNet!Place(
				name <- wd.name + '_notStarted',
				jeton <- 1),
				
		p_inProgress: petriNet!Place(
				name <- wd.name + '_inProgress'),
				
		p_finished: petriNet!Place(
				name <- wd.name + '_finished'),
				
		p_started: petriNet!Place(
				name <- wd.name + '_started'),
				
		-- Transitions 
		t_start: petriNet!Transition (name <- wd.name+'_start'),
		t_finish: petriNet!Transition (name <- wd.name+'_finish'),
		
		--Arcs
		a1 : petriNet!Arc (type <- #simple ,source <- p_notStarted,target <-t_start),
		a21 : petriNet!Arc (type <- #simple ,source <- t_start,target <-p_inProgress),
		a22 : petriNet!Arc (type <- #simple ,source <- t_start,target <-p_started),
		a3 : petriNet!Arc (type <- #simple ,source <- p_inProgress,target <-t_finish),
		a4 : petriNet!Arc (type <- #simple ,source <- t_finish,target <-p_finished)

}
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to
		a_ws : petriNet!Arc(type <- #read_arc
			,source <- thisModule.resolveTemp(ws.predecessor,
				if ((ws.WorkSequenceType = #FINISH_TO_FINISH) or (ws.WorkSequenceType = #FINISH_TO_START))
					then 'p_finished'
					else 'p_started'
					endif)
			,target <- thisModule.resolveTemp(ws.successor,
				if ((ws.WorkSequenceType = #FINISH_TO_START) or (ws.WorkSequenceType = #START_TO_START))
					then 't_start'
					else 't_finish'
					endif)
					)

}
