--@nsURI SimplePDL=http://simplepdl
--@nsURI PetriNet=http://petrinet

module SimplePDL2PetriNet;
create OUT: petriNet from  IN: simplepdl;


helper context simplepdl!Process def : noeudOfPetriNet(): petriNet!Noeud =
		petriNet!Noeud.allInstances()->asSequence() ;

helper context simplepdl!Process def : arcOfPetriNet(): petriNet!Arc =
		petriNet!Arc.allInstances()->asSequence() ;

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petriNet!PetriNet (
		name <- p.name
		,noeud <- p.noeudOfPetriNet()	
		,arc <- p.arcOfPetriNet()
		)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_notStarted: petriNet!Place(
				name <- wd.name + '_notStarted',
				jeton <- 1),
				
		p_inProgress: petriNet!Place(
				name <- wd.name + '_inProgress'),
				
		p_finished: petriNet!Place(
				name <- wd.name + '_finished'),
				
		p_started: petriNet!Place(
				name <- wd.name + '_started'),
				
		-- Transitions 
		t_start: petriNet!Transition (name <- wd.name+'_start'),
		t_finish: petriNet!Transition (name <- wd.name+'_finish'),
		
		--Arcs
		a1 : petriNet!Arc (type <- #simple ,source <- p_notStarted,target <-t_start),
		a21 : petriNet!Arc (type <- #simple ,source <- t_start,target <-p_inProgress),
		a22 : petriNet!Arc (type <- #simple ,source <- t_start,target <-p_started),
		a3 : petriNet!Arc (type <- #simple ,source <- p_inProgress,target <-t_finish),
		a4 : petriNet!Arc (type <- #simple ,source <- t_finish,target <-p_finished)
}

		
rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to
		a_ws : petriNet!Arc(type <- #read_arc
			,source <- thisModule.resolveTemp(ws.predecessor,
				if ((ws.linkType = #finishToFinish) or (ws.linkType = #finishToStart))
					then 'p_finished'
					else 'p_started'
					endif)
			,target <- thisModule.resolveTemp(ws.successor,
				if ((ws.linkType = #finishToStart) or (ws.linkType = #startToStart))
					then 't_start'
					else 't_finish'
					endif)
					)

}

--- Ajouter la transformation des resources 
rule Resource2PetriNet {
	from res : simplepdl!Resource
	to p_res : petriNet!Place(
		name <- res.name,
		jeton <- res.OccuranceNb)
}

rule Parameter2PetriNet {
	from par : simplepdl!parameter
	to 
		par_arc_demande : petriNet!Arc(
			type <- #simple ,
			poid <- par.quantity,
			source <- par.resource,
			target <-thisModule.resolveTemp(par.workdefitionOfparameter(),'t_start')
		),
		par_arc_libere : petriNet!Arc(
			type <- #simple ,
			poid <- par.quantity,
			target <- par.resource,
			source <-thisModule.resolveTemp(par.workdefitionOfparameter(),'t_finish')
		)
}

helper context simplepdl!parameter def : workdefitionOfparameter(): simplepdl!WorkDefinition = 
	let allWorkDef : Sequence(simplepdl!WorkDefinition) =
		simplepdl!WorkDefinition.allInstances()->asSequence() in
		allWorkDef->select(e|e.parameters->includes(self))->first();


