/*
 * generated by Xtext 2.17.1
 */
package project.simple.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import project.simple.ide.contentassist.antlr.internal.InternalPDLParser;
import project.simple.services.PDLGrammarAccess;

public class PDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getWorkSequenceTypeAccess().getAlternatives(), "rule__WorkSequenceType__Alternatives");
			builder.put(grammarAccess.getProcessAccess().getGroup(), "rule__Process__Group__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_6(), "rule__Process__Group_6__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_8(), "rule__Process__Group_8__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_8_3(), "rule__Process__Group_8_3__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_9(), "rule__Process__Group_9__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_9_3(), "rule__Process__Group_9_3__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_10(), "rule__Process__Group_10__0");
			builder.put(grammarAccess.getProcessAccess().getGroup_10_3(), "rule__Process__Group_10_3__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup(), "rule__WorkDefinition__Group__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_4(), "rule__WorkDefinition__Group_4__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_4_3(), "rule__WorkDefinition__Group_4_3__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_5(), "rule__WorkDefinition__Group_5__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_5_3(), "rule__WorkDefinition__Group_5_3__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_6(), "rule__WorkDefinition__Group_6__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_6_3(), "rule__WorkDefinition__Group_6_3__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_7(), "rule__WorkDefinition__Group_7__0");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGroup_7_3(), "rule__WorkDefinition__Group_7_3__0");
			builder.put(grammarAccess.getWorkSequenceAccess().getGroup(), "rule__WorkSequence__Group__0");
			builder.put(grammarAccess.getGuidanceAccess().getGroup(), "rule__Guidance__Group__0");
			builder.put(grammarAccess.getResourceAccess().getGroup(), "rule__Resource__Group__0");
			builder.put(grammarAccess.getResourceAccess().getGroup_4(), "rule__Resource__Group_4__0");
			builder.put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
			builder.put(grammarAccess.getParameterAccess().getGroup_2(), "rule__Parameter__Group_2__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getProcessAccess().getNameAssignment_1(), "rule__Process__NameAssignment_1");
			builder.put(grammarAccess.getProcessAccess().getWorkDefinitionsAssignment_5(), "rule__Process__WorkDefinitionsAssignment_5");
			builder.put(grammarAccess.getProcessAccess().getWorkDefinitionsAssignment_6_1(), "rule__Process__WorkDefinitionsAssignment_6_1");
			builder.put(grammarAccess.getProcessAccess().getWorkSequencesAssignment_8_2(), "rule__Process__WorkSequencesAssignment_8_2");
			builder.put(grammarAccess.getProcessAccess().getWorkSequencesAssignment_8_3_1(), "rule__Process__WorkSequencesAssignment_8_3_1");
			builder.put(grammarAccess.getProcessAccess().getGuidanceAssignment_9_2(), "rule__Process__GuidanceAssignment_9_2");
			builder.put(grammarAccess.getProcessAccess().getGuidanceAssignment_9_3_1(), "rule__Process__GuidanceAssignment_9_3_1");
			builder.put(grammarAccess.getProcessAccess().getResourceAssignment_10_2(), "rule__Process__ResourceAssignment_10_2");
			builder.put(grammarAccess.getProcessAccess().getResourceAssignment_10_3_1(), "rule__Process__ResourceAssignment_10_3_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getNameAssignment_2(), "rule__WorkDefinition__NameAssignment_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getLinksToPredecessorsAssignment_4_2(), "rule__WorkDefinition__LinksToPredecessorsAssignment_4_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getLinksToPredecessorsAssignment_4_3_1(), "rule__WorkDefinition__LinksToPredecessorsAssignment_4_3_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getLinksToSuccessorsAssignment_5_2(), "rule__WorkDefinition__LinksToSuccessorsAssignment_5_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getLinksToSuccessorsAssignment_5_3_1(), "rule__WorkDefinition__LinksToSuccessorsAssignment_5_3_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGuidanceAssignment_6_2(), "rule__WorkDefinition__GuidanceAssignment_6_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getGuidanceAssignment_6_3_1(), "rule__WorkDefinition__GuidanceAssignment_6_3_1");
			builder.put(grammarAccess.getWorkDefinitionAccess().getParametersAssignment_7_2(), "rule__WorkDefinition__ParametersAssignment_7_2");
			builder.put(grammarAccess.getWorkDefinitionAccess().getParametersAssignment_7_3_1(), "rule__WorkDefinition__ParametersAssignment_7_3_1");
			builder.put(grammarAccess.getWorkSequenceAccess().getLinkTypeAssignment_3(), "rule__WorkSequence__LinkTypeAssignment_3");
			builder.put(grammarAccess.getWorkSequenceAccess().getPredecessorAssignment_5(), "rule__WorkSequence__PredecessorAssignment_5");
			builder.put(grammarAccess.getWorkSequenceAccess().getSuccessorAssignment_7(), "rule__WorkSequence__SuccessorAssignment_7");
			builder.put(grammarAccess.getGuidanceAccess().getDescriptionAssignment_3(), "rule__Guidance__DescriptionAssignment_3");
			builder.put(grammarAccess.getResourceAccess().getNameAssignment_2(), "rule__Resource__NameAssignment_2");
			builder.put(grammarAccess.getResourceAccess().getOccuranceNbAssignment_4_1(), "rule__Resource__OccuranceNbAssignment_4_1");
			builder.put(grammarAccess.getParameterAccess().getQuantityAssignment_2_1(), "rule__Parameter__QuantityAssignment_2_1");
			builder.put(grammarAccess.getParameterAccess().getResourceAssignment_4(), "rule__Parameter__ResourceAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PDLGrammarAccess grammarAccess;

	@Override
	protected InternalPDLParser createParser() {
		InternalPDLParser result = new InternalPDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
